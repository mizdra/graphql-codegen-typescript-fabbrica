type Book {
  id: ID!
  title: String!
  author: Author!
}
type Author {
  id: ID!
  name: String!
  books: [Book!]!
}
type User {
  id: ID!
  firstName: String!
  lastName: String!
  fullName: String!
}
type Image {
  id: ID!
  url: String!
  width: Int
  height: Int
}

# NullableTest
type NullableTest_Type {
  field1: String
  field2: [String]
  field3: NullableTest_SubType
  field4: [NullableTest_SubType]
}
type NullableTest_SubType {
  field: String!
}

# InterfaceTest
interface InterfaceTest_Interface {
  id: ID!
}
type InterfaceTest_ImplementingType implements InterfaceTest_Interface {
  id: ID!
  field: String!
}
type InterfaceTest_TypeWithInterfaceField {
  interface: InterfaceTest_Interface!
}

# UnionTest
union UnionTest_Union = UnionTest_Member1 | UnionTest_Member2
type UnionTest_Member1 {
  field1: String!
}
type UnionTest_Member2 {
  field2: String!
}
type UnionTest_Type {
  union: UnionTest_Union!
}

# EnumTest
type EnumTest_Type {
  enum: EnumTest_Enum!
}
enum EnumTest_Enum {
  VALUE1
  VALUE2
}

# CustomScalarTest
scalar CustomScalarTest_CustomScalar1
scalar CustomScalarTest_CustomScalar2
type CustomScalarTest_Type {
  scalar1: CustomScalarTest_CustomScalar1!
  scalar2: CustomScalarTest_CustomScalar2!
}

# InputTest
input InputTest_Input {
  field: String!
}

# NamingConventionTest
type NamingConventionTest_Type {
  field1: String!
  field2: NamingConventionTest_SubType!
}
type NamingConventionTest_SubType {
  field: String!
}

# NonOptionalDefaultFields
type NonOptionalDefaultFields_OptionalDefaultFieldsType {
  field1: String!
  field2: String!
}
